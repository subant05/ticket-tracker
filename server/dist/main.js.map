{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/layout/layout.component.ts","./src/app/components/layout/layout.component.html","./src/app/graphql/index.ts","./src/app/graphql/query/index.ts","./src/app/graphql/query/tickets/index.ts","./src/app/graphql/query/tickets/joined.ts","./src/app/modules/graphql.module.ts","./src/app/pages/dashboard/dashboard.component.ts","./src/app/pages/dashboard/dashboard.component.html","./src/app/pages/login/login.component.ts","./src/app/pages/login/login.component.html","./src/app/routes/app-routes.module.ts","./src/app/services/auth/auth-guard.service.ts","./src/app/services/graphql/gql-query.service.service.ts","./src/environments/environment.ts","./src/environments/shared.confg.ts","./src/main.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","<div class=\"content\">\n  <div class=\"content__main\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n","// Modules\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AppRoutes } from './routes/app-routes.module'\nimport { GraphQLModule } from './modules/graphql.module';\nimport { ReactiveFormsModule } from '@angular/forms'\nimport { HttpClientModule } from '@angular/common/http'\n\n//Components\nimport { LoginComponent } from './pages/login/login.component';\nimport { AppComponent } from './app.component';\n\n// Enviornment Variables\nimport { environment } from '../environments/environment';\n\n// APOLLO\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { ApolloClientOptions, ApolloLink, InMemoryCache, split } from '@apollo/client/core'\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from '@apollo/client/link/error';\nimport { ApolloModule, APOLLO_NAMED_OPTIONS, APOLLO_OPTIONS } from 'apollo-angular';\nimport { HttpLink } from 'apollo-angular/http';\n\n// Google OAuth\nimport { SocialLoginModule, SocialAuthServiceConfig } from '@abacritt/angularx-social-login';\nimport { GoogleLoginProvider } from '@abacritt/angularx-social-login';\nimport { AuthGuardService } from './services/auth/auth-guard.service'\n\n// Material\nimport { MatListModule } from '@angular/material/list';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon'\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatSnackBarModule } from '@angular/material/snack-bar'\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { DashboardComponent } from './pages/dashboard/dashboard.component';\nimport { LayoutComponent } from './components/layout/layout.component';\n\nconst errorLink = onError(({ graphQLErrors, networkError, response }) => {\n\t// React only on graphql errors\n\tif (graphQLErrors && graphQLErrors.length > 0) {\n\t\tif (\n\t\t\t(graphQLErrors[0] as any)?.statusCode >= 400 && \n\t\t\t(graphQLErrors[0] as any)?.statusCode < 500\n\t\t) {\n\t\t\t// handle client side error\n\t\t\tconsole.error(`[Client side error]: ${graphQLErrors[0].message}`);\n\t\t} else {\n\t\t\t// handle server side error\n\t\t\tconsole.error(`[Server side error]: ${graphQLErrors[0].message}`);\n\t\t}\n\t}\n\tif (networkError) {\n    // handle network error\n    console.error(`[Network error]: ${networkError.message}`);\n\t}\n});\n\nconst basicContext = setContext((_, { headers }) => {\n\treturn {\n\t\theaders: {\n\t\t\t...headers,\n\t\t\tAccept: 'charset=utf-8',\n\t\t\tauthorization: `Bearer random token`,\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t};\n});\n\nfunction createDefaultApollo(httpLink: HttpLink): ApolloClientOptions<any> {\n\tconst cache = new InMemoryCache({});\n\n\t// create http \n\tconst http = httpLink.create({\n\t\turi: `${location.protocol}//${location.host}${environment.serviceEndpoint}`,\n\t});\n\n\treturn {\n\t\tconnectToDevTools: !environment.production,\n\t\tassumeImmutableResults: true,\n\t\tcache,\n\t\tlink: ApolloLink.from([basicContext, errorLink, http]),\n\t\tdefaultOptions: {\n\t\t\twatchQuery: {\n\t\t\t\terrorPolicy: 'all',\n\t\t\t},\n\t\t},\n\t};\n}\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    DashboardComponent,\n    LayoutComponent,\n  ],\n  schemas: [\n    CUSTOM_ELEMENTS_SCHEMA\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutes,\n    ApolloModule,\n    BrowserAnimationsModule,\n    GraphQLModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    SocialLoginModule,\n    // Material\n    MatListModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatSnackBarModule,\n    MatGridListModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatPaginatorModule,\n    MatSlideToggleModule,\n    MatTableModule,\n    MatButtonToggleModule,\n    MatTabsModule,\n    MatIconModule,\n    // \n  ],\n  exports:[\n    // Material\n    MatListModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    MatButtonModule,\n    MatSnackBarModule,\n    MatGridListModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatPaginatorModule,\n    MatSlideToggleModule,\n    MatTableModule,\n    MatButtonToggleModule,\n    MatTabsModule,\n    // \n  ],\n  providers: [\n    {\n      provide: 'SocialAuthServiceConfig',\n      useValue: {\n        autoLogin: true,\n        providers: [\n          {\n            id: GoogleLoginProvider.PROVIDER_ID,\n            provider: new GoogleLoginProvider(\n              environment.googleAuthClientId\n            )\n          }\n        ]\n      } as SocialAuthServiceConfig,\n    },\n    {\n\t\t\tprovide: APOLLO_OPTIONS,\n\t\t\tuseFactory: createDefaultApollo,\n\t\t\tdeps: [HttpLink],\n\t\t}\n    , AuthGuardService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  MatSnackBar,\n  MatSnackBarHorizontalPosition,\n  MatSnackBarVerticalPosition,\n} from '@angular/material/snack-bar';\nimport { Subscription } from 'rxjs';\n\n\n@Component({\n  selector: 'app-layout',\n  templateUrl: './layout.component.html',\n  styleUrls: ['./layout.component.scss']\n})\nexport class LayoutComponent implements OnInit, OnDestroy {\n  showRightNav=false;\n  alertSubscription: Subscription | null = null\n  horizontalPosition: MatSnackBarHorizontalPosition = 'center';\n  verticalPosition: MatSnackBarVerticalPosition = 'bottom';\n\n  constructor( ) { }\n\n  ngOnInit(): void {\n  }\n\n  ngOnDestroy():void {\n    this.alertSubscription?.unsubscribe()\n  }\n\n  toggleSideNav(){\n    this.showRightNav = !this.showRightNav;\n  }\n\n}\n","<div class=\"container__content\">\n  <div class=\"container__content-main\">\n      <router-outlet></router-outlet>\n  </div>\n</div>\n\n","import * as Query from './query'\n\nexport {Query}","import * as Tickets from './tickets'\n\nexport {Tickets}","import JoinedTickets from './joined'\n\nexport {JoinedTickets}","import { gql } from 'apollo-angular';\n\nconst JoinedTickets = gql`\nquery Tickets($offset: Int = 1, $limit: Int = 1) {\n  connections(orderBy: ID_DESC, first: $limit, offset: $offset) {\n    nodes {\n      id\n      jira {\n        jiraId\n        jiraTicket\n        machineType\n        priority\n        project\n        requirement\n        description\n        expertConnectLink\n        formantLink\n        issueType\n        roadmapItem\n        summary\n        team {\n          name\n        }\n      }\n      formant {\n        deviceId\n        deviceName\n        id\n        message\n        severity\n        streamName\n        streamType\n        tags\n        time\n        type\n        url\n        value\n      }\n      expertConnect {\n        expertConnectTicketTagsByTicketId {\n          nodes{\n            tag{\n              name\n              id\n            }\n          }\n        }\n        bundle\n        contactId\n        createdAt\n        description\n        ecId\n        id\n        machineHours\n        misc\n        product\n        resolution\n        serialNumber\n        team {\n          name\n          ecId\n          id\n        }\n        title\n        vehicle {\n          deviceId\n          name\n        }\n        advisor {\n          email\n          firstName\n          lastName\n          phone\n        }\n      }\n    }\n    edges {\n      node {\n        id\n      }\n    }\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n  }\n}\n`\n\n  export {JoinedTickets as default}","import {NgModule} from '@angular/core';\nimport {APOLLO_OPTIONS} from 'apollo-angular';\nimport {ApolloClientOptions, InMemoryCache} from '@apollo/client/core';\nimport {HttpLink} from 'apollo-angular/http';\n\nconst uri = 'http://localhost:4000/graphql'; // <-- add the URL of the GraphQL server here\nexport function createApollo(httpLink: HttpLink): ApolloClientOptions<any> {\n  return {\n    link: httpLink.create({uri}),\n    cache: new InMemoryCache(),\n  };\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APOLLO_OPTIONS,\n      useFactory: createApollo,\n      deps: [HttpLink],\n    },\n  ],\n})\nexport class GraphQLModule {}\n","import { Component, OnInit, ViewChild, AfterViewInit, OnDestroy, EventEmitter, Output, Input } from '@angular/core';\nimport { Subscription } from 'rxjs'\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { GqlQueryService } from '../../services/graphql/gql-query.service.service'\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit, OnDestroy {\n  private trackedVehicles: any = []\n  \n  ticketsList = new MatTableDataSource([]);\n  ticketsQuery: Subscription | undefined\n\n  constructor(\n    private gqlQuery: GqlQueryService\n  ) { }\n\n  ngOnInit(): void {\n      // Query Vehicles Currently Online\n    this.ticketsQuery = this.gqlQuery\n      .getJoinedTickets()\n      .subscribe((response: any) => {\n        this.trackedVehicles = response\n        this.ticketsList = new MatTableDataSource(this.trackedVehicles)\n      })\n  }\n\n  ngOnDestroy(): void {\n    this.ticketsQuery?.unsubscribe()\n  }\n\n}\n","<p>dashboard works!</p>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { SocialAuthService, GoogleLoginProvider, SocialUser } from '@abacritt/angularx-social-login';\nimport { Router, ActivatedRoute } from '@angular/router'\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n\n  googleUser: SocialUser | undefined;\n  isLoggedin: boolean = false;\n\n  constructor(\n    private socialAuthService: SocialAuthService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private snackBar: MatSnackBar\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.socialAuthService.authState.subscribe((user) => {\n      this.googleUser = user;\n      this.isLoggedin = (user != null);\n      if (this.isLoggedin){\n        this.router.navigate([\"/\"])\n      }\n      // else\n      //   this.snackBar.open(\"LogIn Failed\");\n\n    });\n  }\n\n  loginWithGoogle(): void {\n    this.socialAuthService.signIn(GoogleLoginProvider.PROVIDER_ID);\n  }\n\n  logOut(): void {\n    this.socialAuthService.signOut();\n  }\n\n}\n","<div class=\"login\">\n    <mat-card class=\"login__card\">\n                <div class=\"login__card--logo\">\n                    <img src=\"/assets/brt-icon-sm.png\"/>\n                </div>\n                <div>\n                    <mat-divider></mat-divider>\n\n                </div>\n                <mat-card-actions>\n                    <button mat-flat-button color=\"primary\" *ngIf=\"isLoggedin === false\" type=\"button\" (click)=\"loginWithGoogle()\">\n                        Login with Google\n                        <mat-icon matSuffix aria-label=\"Log into Google\" >login</mat-icon>\n                    </button>                    \n                </mat-card-actions>\n    </mat-card>\n</div>\n","import { RouterModule, Routes } from \"@angular/router\"\nimport { NgModule } from \"@angular/core\"\nimport { AppComponent } from '../app.component'\nimport { LoginComponent } from \"../pages/login/login.component\"\nimport { DashboardComponent } from \"../pages/dashboard/dashboard.component\"\nimport { LayoutComponent } from \"../components/layout/layout.component\"\nimport { AuthGuardService } from \"../services/auth/auth-guard.service\"\n\nconst routes: Routes = [\n    {\n        path: \"\",\n        component: LayoutComponent,\n        canActivate: [AuthGuardService],\n        runGuardsAndResolvers: 'always',\n        children: [\n            {\n                // Main / Home Page\n                path: \"\",\n                component: DashboardComponent\n            },\n        ]\n    },\n    {\n        path: \"login\",\n        component: LoginComponent\n    }\n\n]\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, {onSameUrlNavigation: 'reload'})],\n    exports: [RouterModule]\n})\nexport class AppRoutes { }","import { Injectable } from '@angular/core';\nimport {CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router} from '@angular/router'\nimport { SocialAuthService, GoogleLoginProvider, SocialUser } from '@abacritt/angularx-social-login';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardService implements CanActivate {\n\n  constructor(\n    private socialAuthService: SocialAuthService,\n    private router: Router\n  ) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):Observable<boolean> | Promise<boolean> | boolean{\n    return new Promise((resolve)=>{\n      this.socialAuthService.authState.subscribe((user) => {\n        if(user != null)\n          resolve(user != null)\n        else\n          this.router.navigate([\"/login\"])  \n      });\n    })\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { rawListeners } from 'process';\nimport { map } from 'rxjs/operators'\nimport * as QueryQL from \"../../graphql\"\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GqlQueryService {\n\n  constructor( \n    private graphService: Apollo\n  ) { }\n\n  private basicFilteredQuery (Query:any, variables:any={}) {\n    return this.graphService\n    .watchQuery<any>({ \n      query: Query, \n      variables\n    })\n    .valueChanges\n  }\n\n  getJoinedTickets(variables:{offset?: number, limit?:number} = {offset:1, limit:10}){\n    return this.basicFilteredQuery(QueryQL.Query.Tickets.JoinedTickets, variables)\n      .pipe(map(response=>{\n        return {\n                data:response.data.connections.nodes\n                , pageInfo: response.data.connections.pageInfo\n            }\n      }))\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\nimport sharedConfig from './shared.confg'\n\nexport const environment = {\n  production: false,\n  ...sharedConfig\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","const sharedConfig =  {\n    googleAuthClientId:'1068443878218-kk375e4311cc3r2rk3b0hn9ukm900tjo.apps.googleusercontent.com',\n    mapboxAPIKey:\"pk.eyJ1IjoiYW50Ymx1ZXJpdmVydGVjaCIsImEiOiJja295a3IwemowbjMwMndwZ2RkdHY2bmJjIn0.xpY0kRQNFTeFgc5l6hqRtQ\",\n    serviceEndpoint:\"/graphql\",\n}\n\nexport {sharedConfig as default}","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":["AppComponent","constructor","selectors","decls","vars","consts","template","i0","BrowserModule","BrowserAnimationsModule","AppRoutes","GraphQLModule","ReactiveFormsModule","HttpClientModule","LoginComponent","environment","ApolloLink","InMemoryCache","setContext","onError","ApolloModule","APOLLO_OPTIONS","HttpLink","SocialLoginModule","GoogleLoginProvider","AuthGuardService","MatListModule","MatCardModule","MatFormFieldModule","MatInputModule","MatIconModule","MatButtonModule","MatButtonToggleModule","MatSnackBarModule","MatGridListModule","MatProgressBarModule","MatProgressSpinnerModule","MatPaginatorModule","MatSlideToggleModule","MatTableModule","MatTabsModule","DashboardComponent","LayoutComponent","errorLink","graphQLErrors","networkError","response","length","statusCode","console","error","message","basicContext","_","headers","Accept","authorization","createDefaultApollo","httpLink","cache","http","create","uri","location","protocol","host","serviceEndpoint","connectToDevTools","production","assumeImmutableResults","link","from","defaultOptions","watchQuery","errorPolicy","AppModule","bootstrap","provide","useValue","autoLogin","providers","id","PROVIDER_ID","provider","googleAuthClientId","useFactory","deps","imports","declarations","exports","ngOnInit","ngOnDestroy","alertSubscription","unsubscribe","toggleSideNav","showRightNav","Query","Tickets","JoinedTickets","gql","default","createApollo","MatTableDataSource","gqlQuery","ticketsQuery","getJoinedTickets","subscribe","trackedVehicles","ticketsList","socialAuthService","router","route","snackBar","authState","user","googleUser","isLoggedin","navigate","loginWithGoogle","signIn","logOut","signOut","RouterModule","routes","path","component","canActivate","runGuardsAndResolvers","children","forRoot","onSameUrlNavigation","state","Promise","resolve","factory","providedIn","map","QueryQL","GqlQueryService","graphService","basicFilteredQuery","variables","query","valueChanges","offset","limit","pipe","data","connections","nodes","pageInfo","sharedConfig","mapboxAPIKey","__NgCli_bootstrap_1","bootstrapModule","catch","err"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}